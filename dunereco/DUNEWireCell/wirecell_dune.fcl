#include "services_dune.fcl"
#include "services_vdcoldbox.fcl"

BEGIN_PROLOG

protodunespdata_nfsp: 
{
    module_type : WireCellToolkit
    wcls_main: {
        tool_type: WCLS
        apps: ["Pgrapher"]
        
        # Libraries in which to look for WCT components
        plugins: ["WireCellGen", "WireCellSigProc", "WireCellSio", "WireCellPgraph", "WireCellLarsoft"]
        
        # The tool marshals the art::Event to these visitors before.
        # See notes below in params.
        inputers: ["wclsRawFrameSource"
                   # To use wclsMultiChannelNoiseDB you must also put epoch:dynamic below
                   # and you must have geo::Geometry service in your environment.
                   # ,"wclsMultiChannelNoiseDB"  
               ]
        
        # or after the WCT app is run.  These names MUST be used identically in the Jsonnet
        # fixme: https:#github.com/WireCell/larwirecell/issues/3
        #outputers: ["wclsFrameSaver:nfsaver", "wclsFrameSaver:spsaver"]
        outputers: ["wclsFrameSaver:spsaver"]

        # This sets the "main" Jsonnet file which provides the 
        # configuration for the Wire-Cell Toolkit components.  It is
        # take as relative to entries in WIRECELL_PATH.
        configs: ["pgrapher/experiment/pdsp/wcls-nf-sp.jsonnet"]

        # Set the "external variables" required by the Jsonnet.
        params : {
            # This locates the input raw::RawDigit collection in the art::Event 
            raw_input_label: "tpcrawdecoder:daq"

            # Set "data" vs. "sim".  The epoch below probably should follow suit.
            reality: "data"
            # reality: "sim"

            # if epoch is "dynamic" you MUST add
            # "wclsMultiChannelNoiseDB" to "inputers" and must NOT
            # add it if not "dynamic"
            # epoch: "dynamic"
            # epoch: "perfect"
            epoch: "after"

            # Save output signal waveforms (recob::Wire) in "sparse" or "dense" form
            signal_output_form: "sparse"
        }

        structs: {
            # Define wire filter for signal processing (sp-filters.jsonnet)
            # wf('Wire_col', { sigma: 1.0 / wc.sqrtpi * std.extVar('wire_col_nsigma') }),
            wire_col_nsigma: 10.0
        }
    }
}

protodunespdata_wctsp: 
{
    module_type : WireCellToolkit
    wcls_main: {
        tool_type: WCLS
        apps: ["Pgrapher"]
        
        # Libraries in which to look for WCT components
        plugins: ["WireCellGen", "WireCellSigProc", "WireCellSio", "WireCellPgraph", "WireCellLarsoft"]
        
        # The tool marshals the art::Event to these visitors before.
        # See notes below in params.
        inputers: ["wclsCookedFrameSource"
                   # To use wclsMultiChannelNoiseDB you must also put epoch:dynamic below
                   # and you must have geo::Geometry service in your environment.
                   # ,"wclsMultiChannelNoiseDB"  
               ]
        
        # or after the WCT app is run.  These names MUST be used identically in the Jsonnet
        # fixme: https://github.com/WireCell/larwirecell/issues/3
        #outputers: ["wclsFrameSaver:nfsaver", "wclsFrameSaver:spsaver"]
        outputers: ["wclsFrameSaver:spsaver"]
        
        # This sets the "main" Jsonnet file which provides the 
        # configuration for the Wire-Cell Toolkit components.  It is
        # take as relative to entries in WIRECELL_PATH.
        configs: ["pgrapher/experiment/pdsp/wcls-sp.jsonnet"]
    
        # Set the "external variables" required by the Jsonnet.
        params : {
            # This locates the input raw::RawDigit collection in the art::Event 
            #raw_input_label: "tpcrawdecoder:daq"
            #raw_input_label: "caldata"
            raw_input_label: "caldata:dataprep"
            
            # Set "data" vs. "sim".  The epoch below probably should follow suit.
            reality: "data"
            # reality: "sim"

            # if epoch is "dynamic" you MUST add
            # "wclsMultiChannelNoiseDB" to "inputers" and must NOT
            # add it if not "dynamic"
            # epoch: "dynamic"
            # epoch: "perfect"
            epoch: "after"
            
            # Save output signal waveforms (recob::Wire) in "sparse" or "dense" form
            signal_output_form: "sparse"
        }

        structs: {
            # Define wire filter for signal processing (sp-filters.jsonnet)
            # wf('Wire_col', { sigma: 1.0 / wc.sqrtpi * std.extVar('wire_col_nsigma') }),
            wire_col_nsigma: 10.0
        }
    }
}

protodunehddata_wctsp: @local::protodunespdata_wctsp
protodunehddata_wctsp.wcls_main.configs: ["pgrapher/experiment/pdhd/wcls-sp.jsonnet"]

wirecell_protodunespmc:
{
    module_type : WireCellToolkit
    wcls_main: {
        tool_type: WCLS
        apps: ["Pgrapher"]

        plugins: ["WireCellPgraph", "WireCellGen","WireCellSio","WireCellLarsoft"]

        // needs to be found via your WIRECELL_PATH 
        # configs: ["pgrapher/experiment/pdsp/wcls-sim-drift-simchannel.jsonnet"]
        configs: ["pgrapher/experiment/pdsp/wcls-sim-drift-simchannel-priorSCE.jsonnet"]


        // Contract note: these exact "type:name" must be used to identify
        // the configuration data structures for these components in the Jsonnet.

        inputers: ["wclsSimDepoSource:"]
        outputers: [
            "wclsSimChannelSink:postdrift",
            "wclsFrameSaver:simdigits"
        ]

        // Make available parameters via Jsonnet's std.extVar()
        params: {
        }
        structs: {
            // Longitudinal diffusion constant [cm2/s]
            DL: 4.0
            // Transverse diffusion constant [cm2/s]
            DT: 8.8
            // Electron lifetime [ms]
            lifetime: 35.0
            // Electron drift speed from SP measurement
            driftSpeed: 1.565
        }
    }
}

wirecell_protodunehdmc: @local::wirecell_protodunespmc
wirecell_protodunehdmc.wcls_main.configs: ["pgrapher/experiment/pdhd/wcls-sim-drift-simchannel-priorSCE.jsonnet"]

wirecell_dunevd_coldbox_mc:
{
    module_type : WireCellToolkit
    wcls_main: {
        tool_type: WCLS
        apps: ["Pgrapher"]
        plugins: ["WireCellPgraph", "WireCellGen","WireCellSio","WireCellRoot","WireCellLarsoft"]
        // needs to be found via your WIRECELL_PATH 
        configs: ["pgrapher/experiment/dune-vd-coldbox/wcls-sim-drift-simchannel.jsonnet"]
        inputers: ["wclsSimDepoSource:electron"]
        outputers: [
            "wclsSimChannelSink:postdrift",
            "wclsFrameSaver:simdigits"
        ]

        // Make available parameters via Jsonnet's std.extVar()
        params: {
            active_cru: 'tde' // 'bde'
        }
	structs: {
           # number of time samples
           nticks: @local::vdcb_crp1_top_services.DetectorPropertiesService.NumberTimeSamples
	   lifetime: @local::vdcb_crp1_top_services.DetectorPropertiesService.Electronlifetime
	   DL: @local::dunefd_largeantparameters.LongitudinalDiffusion
	   DT: @local::dunefd_largeantparameters.TransverseDiffusion
           efield: @local::vdcb_crp1_top_services.DetectorPropertiesService.Efield[0] # kV/cm
           temperature: @local::vdcb_services.DetectorPropertiesService.Temperature # K
	}
    }
}


wirecell_dunevd_coldboxcrp2_mc:
{
    module_type : WireCellToolkit
    wcls_main: {
        tool_type: WCLS
        apps: ["Pgrapher"]
        plugins: ["WireCellPgraph", "WireCellGen","WireCellSio","WireCellRoot","WireCellLarsoft"]
        // needs to be found via your WIRECELL_PATH 
        configs: ["pgrapher/experiment/dunevd-crp2/wcls-sim-drift-simchannel.jsonnet"]
        inputers: ["wclsSimDepoSource:electron"]
        outputers: [
            "wclsSimChannelSink:postdrift",
            "wclsFrameSaver:simdigits"
        ]

        // Make available parameters via Jsonnet's std.extVar()
//        params: {
//            active_cru: 'tde' // 'bde'
//        }
	structs: {
           # number of time samples
           nticks: @local::vdcb_crp2_services.DetectorPropertiesService.NumberTimeSamples
           clock_speed: @local::vdcb_crp2_services.DetectorClocksService.ClockSpeedTPC
	   lifetime: @local::vdcb_crp2_services.DetectorPropertiesService.Electronlifetime
	   DL: @local::dunefd_largeantparameters.LongitudinalDiffusion
	   DT: @local::dunefd_largeantparameters.TransverseDiffusion
           efield: @local::vdcb_crp2_services.DetectorPropertiesService.Efield[0] # kV/cm
           temperature: @local::vdcb_services.DetectorPropertiesService.Temperature # K
	}
    }
}




wirecell_protodunevd_mc:
{
    module_type : WireCellToolkit
    wcls_main: {
        tool_type: WCLS
        apps: ["Pgrapher"]
        plugins: ["WireCellPgraph", "WireCellGen","WireCellSio","WireCellRoot","WireCellLarsoft"]
        // needs to be found via your WIRECELL_PATH 
        configs: ["pgrapher/experiment/protodunevd/wcls-sim-drift-simchannel.jsonnet"]
        inputers: ["wclsSimDepoSource:electron"]
        outputers: [
            "wclsSimChannelSink:postdrift",
            "wclsFrameSaver:simdigits"
        ]

        // Make available parameters via Jsonnet's std.extVar()
        params: {
        }
	structs: {
           nticks: @local::protodunevd_services.DetectorPropertiesService.NumberTimeSamples
           lifetime: @local::protodunevd_services.DetectorPropertiesService.Electronlifetime
           DL: @local::dunefd_largeantparameters.LongitudinalDiffusion #4.0e-9
           DT: @local::dunefd_largeantparameters.TransverseDiffusion #8.8e-9
           efield: @local::protodunevd_services.DetectorPropertiesService.Efield[0] # kV/cm
           temperature: @local::protodunevd_services.DetectorPropertiesService.Temperature # K
	}
    }
}

dune10kt_mc_nfsp:
{
#empty for now
}

dune10kt_1x2x6_mc_nfsp: 
{
    module_type : WireCellToolkit
    wcls_main: {
        tool_type: WCLS
        apps: ["Pgrapher"]
        
        # Libraries in which to look for WCT components
        plugins: ["WireCellGen", "WireCellSigProc", "WireCellSio", "WireCellPgraph", "WireCellLarsoft"]
        
        # The tool marshals the art::Event to these visitors before.
        # See notes below in params.
        inputers: ["wclsRawFrameSource"
                   # To use wclsMultiChannelNoiseDB you must also put epoch:dynamic below
                   # and you must have geo::Geometry service in your environment.
                   # ,"wclsMultiChannelNoiseDB"  
               ]
        
        # or after the WCT app is run.  These names MUST be used identically in the Jsonnet
        # fixme: https:#github.com/WireCell/larwirecell/issues/3
        #outputers: ["wclsFrameSaver:nfsaver", "wclsFrameSaver:spsaver"]
        outputers: ["wclsFrameSaver:spsaver"]

        # This sets the "main" Jsonnet file which provides the 
        # configuration for the Wire-Cell Toolkit components.  It is
        # take as relative to entries in WIRECELL_PATH.
        configs: ["pgrapher/experiment/dune10kt-1x2x6/wcls-nf-sp.jsonnet"]

        # Set the "external variables" required by the Jsonnet.
        params : {
            # This locates the input raw::RawDigit collection in the art::Event 
            raw_input_label: "tpcrawdecoder:daq"

            # Set "data" vs. "sim".  The epoch below probably should follow suit.
            reality: "data"
            # reality: "sim"

            # if epoch is "dynamic" you MUST add
            # "wclsMultiChannelNoiseDB" to "inputers" and must NOT
            # add it if not "dynamic"
            # epoch: "dynamic"
            # epoch: "perfect"
            epoch: "after"

            # Save output signal waveforms (recob::Wire) in "sparse" or "dense" form
            signal_output_form: "sparse"
        }
    }
}

dune10kt_1x2x2_mc_nfsp: 
{
    module_type : WireCellToolkit
    wcls_main: {
        tool_type: WCLS
        apps: ["Pgrapher"]
        
        # Libraries in which to look for WCT components
        plugins: ["WireCellGen", "WireCellSigProc", "WireCellSio", "WireCellPgraph", "WireCellLarsoft"]
        
        # The tool marshals the art::Event to these visitors before.
        # See notes below in params.
        inputers: ["wclsRawFrameSource"
                   # To use wclsMultiChannelNoiseDB you must also put epoch:dynamic below
                   # and you must have geo::Geometry service in your environment.
                   # ,"wclsMultiChannelNoiseDB"  
               ]
        
        # or after the WCT app is run.  These names MUST be used identically in the Jsonnet
        # fixme: https:#github.com/WireCell/larwirecell/issues/3
        #outputers: ["wclsFrameSaver:nfsaver", "wclsFrameSaver:spsaver"]
        outputers: ["wclsFrameSaver:spsaver"]

        # This sets the "main" Jsonnet file which provides the 
        # configuration for the Wire-Cell Toolkit components.  It is
        # take as relative to entries in WIRECELL_PATH.
        configs: ["pgrapher/experiment/dune10kt-1x2x2/wcls-nf-sp.jsonnet"]

        # Set the "external variables" required by the Jsonnet.
        params : {
            # This locates the input raw::RawDigit collection in the art::Event 
            raw_input_label: "tpcrawdecoder:daq"

            # Set "data" vs. "sim".  The epoch below probably should follow suit.
            reality: "data"
            # reality: "sim"

            # if epoch is "dynamic" you MUST add
            # "wclsMultiChannelNoiseDB" to "inputers" and must NOT
            # add it if not "dynamic"
            # epoch: "dynamic"
            # epoch: "perfect"
            epoch: "after"

            # Save output signal waveforms (recob::Wire) in "sparse" or "dense" form
            signal_output_form: "sparse"
        }
    }
}


# This rewrites existing raw::RawDigit and recob::Wire
# collections in order to truncate and scale them.  This is not
# WCT related but happens to run generic art modules currently
# living in larwirecell.  The intention is to satisfy
# assumptions made by legacy code.
protodunespdata_digitwire : {
    module_type : "EventButcher"
    
    inRawTag: "tpcrawdecoder:daq"
    inSigTag: "wclsdatasp:gauss:"

    # apparently downstream code is too brittle to handle giving
    # any instance names.
    
    outRawTag: ""
    outSigTag: ""
    outAssnTag: ""
    
    # don't throw away data
    
    ndrop: 0
    nkeep: -1
    
    # match some arbitrary and inexplicable "ADC" charge scale
    # instead of number of ionized electrons.
    
    sigscale: 0.005
}

tpcrawdecoder_dunefd_horizdrift : {
 #Empty for now
}

tpcrawdecoder_dunefd_horizdrift_1x2x6 : {

   module_type : WireCellToolkit
   wcls_main: {
      tool_type: WCLS
      apps: ["Pgrapher"]

      logsinks: ["stdout:info", "wcls-sim-drift-simchannel.log:debug"]
      loglevels: ["debug"]

      plugins: ["WireCellPgraph", "WireCellGen","WireCellSio","WireCellRoot","WireCellLarsoft","WireCellTbb"]

      // needs to be found via your WIRECELL_PATH
      configs: ["pgrapher/experiment/dune10kt-1x2x6/wcls-sim-drift-simchannel.jsonnet"]


      // Contract note: these exact "type:name" must be used to identify
      // the configuration data structures for these components in the Jsonnet.

      inputers: ["wclsSimDepoSource:"]
      outputers: [
         "wclsSimChannelSink:postdrift",
         "wclsFrameSaver:simdigits"
      ]

      // Make available parameters via Jsonnet's std.extVar()
      params: {
      }
      structs: {
          # number of time samples
          #nticks: @local::dunefd_detproperties.NumberTimeSamples
          # Longitudinal diffusion constant [cm2/ns]
          DL: @local::dunefd_largeantparameters.LongitudinalDiffusion
          # Transverse diffusion constant [cm2/ns]
          DT: @local::dunefd_largeantparameters.TransverseDiffusion
          # Electron lifetime [us]
          lifetime: @local::dunefd_detproperties.Electronlifetime
          # Electron drift speed, assumes a certain applied E-field [mm/us]
          driftSpeed: 1.60563
          # G4RefTime [us]
          G4RefTime: @local::dunefd_detectorclocks.G4RefTime

      }

   }
}

dunefd_horizdrift_1x2x6_sim_nfsp : {
    module_type : WireCellToolkit
    wcls_main: {
        tool_type: WCLS
        apps: ["Pgrapher"] # TbbFlow, Pgrapher
        logsinks: ["stdout:info", "wcls-sim-drift-simchannel-nf-sp.log:debug"]
        loglevels: ["debug"]
        plugins: ["WireCellPgraph", "WireCellGen","WireCellSio","WireCellRoot","WireCellLarsoft","WireCellTbb"]
        # needs to be found via your WIRECELL_PATH
        configs: ["pgrapher/experiment/dune10kt-1x2x6/wcls-sim-drift-simchannel-nf-sp.jsonnet"]
        # Contract note: these exact "type:name" must be used to identify
        # the configuration data structures for these components in the Jsonnet.
        inputers: ["wclsSimDepoSource:"]
        outputers: [
            "wclsSimChannelSink:postdrift",
            "wclsFrameSaver:spsignals"
        ]
        # Make available parameters via Jsonnet's std.extVar()
        params: {
        }
        structs: {
          # number of time samples
          #nticks: @local::dunefd_detproperties.NumberTimeSamples
          # Longitudinal diffusion constant [cm2/ns]
          DL: @local::dunefd_largeantparameters.LongitudinalDiffusion
          # Transverse diffusion constant [cm2/ns]
          DT: @local::dunefd_largeantparameters.TransverseDiffusion
          # Electron lifetime [us]
          lifetime: @local::dunefd_detproperties.Electronlifetime
          # Electron drift speed, assumes a certain applied E-field [mm/us]
          driftSpeed: 1.60563
          # G4RefTime [us]
          G4RefTime: @local::dunefd_detectorclocks.G4RefTime


        }
    }
}

tpcrawdecoder_dunefd_horizdrift_1x2x2 : {

   module_type : WireCellToolkit
   wcls_main: {
      tool_type: WCLS
      apps: ["Pgrapher"]

      logsinks: ["stdout:info", "wcls-sim-drift-simchannel.log:debug"]
      loglevels: ["debug"]

      plugins: ["WireCellPgraph", "WireCellGen","WireCellSio","WireCellRoot","WireCellLarsoft","WireCellTbb"]

      // needs to be found via your WIRECELL_PATH
      configs: ["pgrapher/experiment/dune10kt-1x2x2/wcls-sim-drift-simchannel-splusn.jsonnet"]


      // Contract note: these exact "type:name" must be used to identify
      // the configuration data structures for these components in the Jsonnet.

      inputers: ["wclsSimDepoSource:"]
      outputers: [
         "wclsSimChannelSink:postdrift",
         "wclsFrameSaver:simdigits"
      ]

      // Make available parameters via Jsonnet's std.extVar()
      params: {
      }
      structs: {
        # Longitudinal diffusion constant [cm2/s]
        DL: 4.0
        # Transverse diffusion constant [cm2/s]
        DT: 8.8
        # Electron lifetime [ms]
        lifetime: 10
        # Electron drift speed, assumes a certain applied E-field [mm/us]
        driftSpeed: 1.60563
        # G4RefTime [us]
        G4RefTime: @local::dunefd_detectorclocks.G4RefTime
      }

   }
}


tpcrawdecoder_dunefd_vertdrift_2view : {
   module_type : WireCellToolkit
   wcls_main: {
      tool_type: WCLS
      apps: ["Pgrapher"]
      # apps: ["TbbFlow"]

      logsinks: ["stdout:info", "wcls-sim-drift-simchannel.log:debug"]
      loglevels: ["debug"]

      plugins: ["WireCellPgraph", "WireCellGen","WireCellSio","WireCellRoot","WireCellLarsoft","WireCellTbb"]

      // needs to be found via your WIRECELL_PATH
      configs: ["pgrapher/experiment/dune-vd/wcls-sim-drift-simchannel.jsonnet"]


      // Contract note: these exact "type:name" must be used to identify
      // the configuration data structures for these components in the Jsonnet.

      inputers: ["wclsSimDepoSource:"]
      outputers: [
         "wclsSimChannelSink:postdrift",
         "wclsFrameSaver:simdigits"
      ]

      // Make available parameters via Jsonnet's std.extVar()
      params: {
        # file: wires
        files_wires: "dunevd10kt-1x6x6-2view-wires-v1.json.bz2"
        # file: fields
        # dunevd-resp-isoc3views-18d92.json.bz2 30,-30,90
        # pcbro-response-avg-12d50.json.bz2 2view prototype
        files_fields: "pcbro-response-avg-12d50.json.bz2"
        # file: noise
        # dunevd10kt-1x6x6-3view-noise-spectra-v1.json.bz2
        # dunevd10kt-1x6x6-3view30deg-noise-spectra-v1.json.bz2
        # dunevd10kt-1x6x6-2view-noise-spectra-v1.json.bz2
        files_noise: "dunevd10kt-1x6x6-2view-noise-spectra-v1.json.bz2"
      }
      structs: {
        # number of time samples
        nticks: @local::dunefdvd_detproperties.NumberTimeSamples
        # Longitudinal diffusion constant [cm2/ns] 4.0e-9
        DL: @local::dunefdvd_largeantparameters.LongitudinalDiffusion
        # Transverse diffusion constant [cm2/ns] 8.8e-9
        DT: @local::dunefdvd_largeantparameters.TransverseDiffusion
        # Electron lifetime [us] #10.4e3
        lifetime: @local::dunefdvd_detproperties.Electronlifetime
        # Electron drift speed, assumes a certain applied E-field [mm/us]
        driftSpeed: 1.60563
        # G4RefTime [us]
        G4RefTime: @local::dunefd_detectorclocks.G4RefTime
        # response plane [cm]
        response_plane: 18.92
        # number of CRMs, 36 for 1x6x6, 112 for 1x8x14
        ncrm: 36
      }
   }
}



tpcrawdecoder_dunefd_vertdrift_3view: {
    @table::tpcrawdecoder_dunefd_vertdrift_2view
    wcls_main: {
        @table::tpcrawdecoder_dunefd_vertdrift_2view.wcls_main
        params: {
          files_wires: "dunevd10kt-1x6x6-3view-wires-v1.json.bz2"
          files_fields: "dunevd-resp-isoc3views-18d92.json.bz2"
          files_noise: "dunevd10kt-1x6x6-3view-noise-spectra-v1.json.bz2"
        }
        structs: {
          # number of time samples
          nticks: @local::dunefdvd_detproperties.NumberTimeSamples
          # Longitudinal diffusion constant [cm2/ns] 4.0e-9
          DL: @local::dunefdvd_largeantparameters.LongitudinalDiffusion
          # Transverse diffusion constant [cm2/ns] 8.8e-9
          DT: @local::dunefdvd_largeantparameters.TransverseDiffusion
          # Electron lifetime [us] #10.4e3
          lifetime: @local::dunefdvd_detproperties.Electronlifetime
          # Electron drift speed, assumes a certain applied E-field [mm/us]
          driftSpeed: 1.60563
          # G4RefTime [us]
          G4RefTime: @local::dunefd_detectorclocks.G4RefTime
          # response plane [cm]
          response_plane: 18.92
          # number of CRMs, 36 for 1x6x6, 112 for 1x8x14
          ncrm: 36
        }
    }
}

tpcrawdecoder_dunefd_vertdrift_1x8x6_3view: {
    @table::tpcrawdecoder_dunefd_vertdrift_2view
    wcls_main: {
        @table::tpcrawdecoder_dunefd_vertdrift_2view.wcls_main
        params: {
          files_wires: "dunevd10kt_3view_v2_refactored_1x8x6ref.json.bz2"
          files_fields: "dunevd-resp-isoc3views-18d92.json.bz2"
          files_noise: "dunevd10kt-1x6x6-3view-noise-spectra-v1.json.bz2"
        }
        structs: {
          # number of time samples
          nticks: @local::dunefdvd_detproperties.NumberTimeSamples
          # Longitudinal diffusion constant [cm2/ns] 4.0e-9
          DL: @local::dunefdvd_largeantparameters.LongitudinalDiffusion
          # Transverse diffusion constant [cm2/ns] 8.8e-9
          DT: @local::dunefdvd_largeantparameters.TransverseDiffusion
          # Electron lifetime [us] #10.4e3
          lifetime: @local::dunefdvd_detproperties.Electronlifetime
          # Electron drift speed, assumes a certain applied E-field [mm/us]
          driftSpeed: 1.60563
          # G4RefTime [us]
          G4RefTime: @local::dunefd_detectorclocks.G4RefTime
          # response plane [cm]
          response_plane: 18.92
          # number of CRMs, 36 for 1x6x6, 112 for 1x8x14
          ncrm: 48
        }
    }
}

tpcrawdecoder_dunefd_vertdrift_1x8x14_3view: {
    @table::tpcrawdecoder_dunefd_vertdrift_2view
    wcls_main: {
        @table::tpcrawdecoder_dunefd_vertdrift_2view.wcls_main
        params: {
          files_wires: "dunevd10kt-1x8x14-3view-wires-v1.json.bz2"
          files_fields: "dunevd-resp-isoc3views-18d92.json.bz2"
          files_noise: "dunevd10kt-1x6x6-3view-noise-spectra-v1.json.bz2"
        }
        structs: {
          # number of time samples
          nticks: @local::dunefdvd_detproperties.NumberTimeSamples
          # Longitudinal diffusion constant [cm2/ns] 4.0e-9
          DL: @local::dunefdvd_largeantparameters.LongitudinalDiffusion
          # Transverse diffusion constant [cm2/ns] 8.8e-9
          DT: @local::dunefdvd_largeantparameters.TransverseDiffusion
          # Electron lifetime [us] #10.4e3
          lifetime: @local::dunefdvd_detproperties.Electronlifetime
          # Electron drift speed, assumes a certain applied E-field [mm/us]
          driftSpeed: 1.60563
          # G4RefTime [us]
          G4RefTime: @local::dunefd_detectorclocks.G4RefTime
          # response plane [cm]
          response_plane: 18.92
          # number of CRMs, 36 for 1x6x6, 112 for 1x8x14
          ncrm: 112
        }
    }
}


tpcrawdecoder_dunefd_vertdrift_3view_30deg: {
    @table::tpcrawdecoder_dunefd_vertdrift_2view
    wcls_main: {
        @table::tpcrawdecoder_dunefd_vertdrift_2view.wcls_main
        params: {
          files_wires: "dunevd10kt-1x6x6-3view30deg-wires-v1.json.bz2"
          files_fields: "dunevd-resp-isoc3views-18d92.json.bz2"
          files_noise: "dunevd10kt-1x6x6-3view30deg-noise-spectra-v1.json.bz2"
        }
        structs: {
          # number of time samples
          nticks: @local::dunefdvd_detproperties.NumberTimeSamples
          # Longitudinal diffusion constant [cm2/ns] 4.0e-9
          DL: @local::dunefdvd_largeantparameters.LongitudinalDiffusion
          # Transverse diffusion constant [cm2/ns] 8.8e-9
          DT: @local::dunefdvd_largeantparameters.TransverseDiffusion
          # Electron lifetime [us] #10.4e3
          lifetime: @local::dunefdvd_detproperties.Electronlifetime
          # Electron drift speed, assumes a certain applied E-field [mm/us]
          driftSpeed: 1.60563
          # G4RefTime [us]
          G4RefTime: @local::dunefd_detectorclocks.G4RefTime
          # response plane [cm]
          response_plane: 18.92
          # number of CRMs, 36 for 1x6x6, 112 for 1x8x14
          ncrm: 36
        }
    }
}

tpcrawdecoder_dunefd_vertdrift_1x8x6_3view_30deg: {
    @table::tpcrawdecoder_dunefd_vertdrift_2view
    wcls_main: {
        @table::tpcrawdecoder_dunefd_vertdrift_2view.wcls_main
        params: {
          files_wires: "dunevd10kt_3view_30deg_v3_refactored_1x8x6ref.json.bz2"
          files_fields: "dunevd-resp-isoc3views-18d92.json.bz2"
          files_noise: "dunevd10kt-1x6x6-3view30deg-noise-spectra-v1.json.bz2"
        }
        structs: {
          # number of time samples
          nticks: @local::dunefdvd_detproperties.NumberTimeSamples
          # Longitudinal diffusion constant [cm2/ns] 4.0e-9
          DL: @local::dunefdvd_largeantparameters.LongitudinalDiffusion
          # Transverse diffusion constant [cm2/ns] 8.8e-9
          DT: @local::dunefdvd_largeantparameters.TransverseDiffusion
          # Electron lifetime [us] #10.4e3
          lifetime: @local::dunefdvd_detproperties.Electronlifetime
          # Electron drift speed, assumes a certain applied E-field [mm/us]
          driftSpeed: 1.60563
          # G4RefTime [us]
          G4RefTime: @local::dunefd_detectorclocks.G4RefTime
          # response plane [cm]
          response_plane: 18.92
          # number of CRMs, 36 for 1x6x6, 112 for 1x8x14
          ncrm: 48
        }
    }
}


dune10kt_dunefd_vertdrift_data_nfsp : {
#empty for now
}

dune10kt_dunefd_vertdrift_1x6x6_data_nfsp : {
  @table::dune10kt_dunefd_vertdrift_data_nfsp
}

dune10kt_dunefd_vertdrift_1x6x6_3view_data_nfsp : {
   module_type : WireCellToolkit
   wcls_main: {
      tool_type: WCLS
      apps: ["Pgrapher"]

      logsinks: ["stdout"]
      loglevels: ["debug", "pgraph:info"]

      # Libraries in which to look for WCT components
      plugins: ["WireCellGen", "WireCellSigProc", "WireCellRoot", "WireCellPgraph", "WireCellLarsoft"]

      # The tool marshals the art::Event to these visitors before.
      # See notes below in params.
      inputers: ["wclsRawFrameSource"
         # To use wclsMultiChannelNoiseDB you must also put epoch:dynamic below
         # and you must have geo::Geometry service in your environment.
         # ,"wclsMultiChannelNoiseDB"  
      ]

      # or after the WCT app is run.  These names MUST be used identically in the Jsonnet
      # fixme: https://github.com/WireCell/larwirecell/issues/3
      #outputers: ["wclsFrameSaver:nfsaver", "wclsFrameSaver:spsaver"]
      outputers: ["wclsFrameSaver:spsaver"]

      # This sets the "main" Jsonnet file which provides the 
      # configuration for the Wire-Cell Toolkit components.  It is
      # take as relative to entries in WIRECELL_PATH.
      configs: ["pgrapher/experiment/dune-vd/wcls-nf-sp.jsonnet"]

      # Set the "external variables" required by the Jsonnet.
      # ext-var, string
      params : {
          # This locates the input raw::RawDigit collection in the art::Event 
          raw_input_label: "tpcrawdecoder:daq"
          # raw_input_label: "simmer:orig"
          #raw_input_label: "caldata"

          # Set "data" vs. "sim".  The epoch below probably should follow suit.
          reality: "data"
          # reality: "sim"

          # if epoch is "dynamic" you MUST add
          # "wclsMultiChannelNoiseDB" to "inputers" and must NOT
          # add it if not "dynamic"
          # epoch: "dynamic"
          # epoch: "perfect"
          epoch: "after"

          # Save output signal waveforms (recob::Wire) in "sparse" or "dense" form
          signal_output_form: "sparse"

          # file: wires
          files_wires: "dunevd10kt-1x6x6-3view-wires-v1.json.bz2"

          # file: fields
          # 3view30: dunevd-resp-isoc3views-18d92.json.bz2
          # 2view: pcbro-response-avg-12d50.json.bz2
          files_fields: "dunevd-resp-isoc3views-18d92.json.bz2"

          # set mapping between internal wct plane ids and larsoft
          # WCT assumes kU, kV, kW regardless of orientation. 
          # Larsoft expects kY for 2nd induction plane for this geometry
          # Set the mapping as kU->kU, kV->kY, kW->kW in the jsonnet
          geo_planeid_labels: "dunevd_3view"
          
      }
      # ext-code, code
      structs : {
          # for nticks calculation in common/params.jsonnet: elec
          driftSpeed: 1.60563
          
          # used in ChannelSelector
          # 3view: 864; 3view30deg: 900; 2view: 928
          channel_per_crm: 864
          
          # response plane, related to which field response is used [cm]
          # 3view30: dunevd-resp-isoc3views-18d92.json.bz2: 18.92
          # 2view: pcbro-response-avg-12d50.json.bz2: 12.50
          response_plane: 18.92

          # number of time samples
          nticks: @local::dunefdvd_detproperties.NumberTimeSamples

          # number of CRMs, 36 for 1x6x6, 112 for 1x8x14
          ncrm: 36
      }
   }
}

dune10kt_dunefd_vertdrift_1x6x6_3view_30deg_data_nfsp : {
   module_type : WireCellToolkit
   wcls_main: {
      tool_type: WCLS
      apps: ["Pgrapher"]

      logsinks: ["stdout"]
      loglevels: ["debug", "pgraph:info"]

      # Libraries in which to look for WCT components
      plugins: ["WireCellGen", "WireCellSigProc", "WireCellRoot", "WireCellPgraph", "WireCellLarsoft"]

      # The tool marshals the art::Event to these visitors before.
      # See notes below in params.
      inputers: ["wclsRawFrameSource"
         # To use wclsMultiChannelNoiseDB you must also put epoch:dynamic below
         # and you must have geo::Geometry service in your environment.
         # ,"wclsMultiChannelNoiseDB"  
      ]

      # or after the WCT app is run.  These names MUST be used identically in the Jsonnet
      # fixme: https://github.com/WireCell/larwirecell/issues/3
      #outputers: ["wclsFrameSaver:nfsaver", "wclsFrameSaver:spsaver"]
      outputers: ["wclsFrameSaver:spsaver"]

      # This sets the "main" Jsonnet file which provides the 
      # configuration for the Wire-Cell Toolkit components.  It is
      # take as relative to entries in WIRECELL_PATH.
      configs: ["pgrapher/experiment/dune-vd/wcls-nf-sp.jsonnet"]

      # Set the "external variables" required by the Jsonnet.
      # ext-var, string
      params : {
          # This locates the input raw::RawDigit collection in the art::Event 
          raw_input_label: "tpcrawdecoder:daq"
          # raw_input_label: "simmer:orig"
          #raw_input_label: "caldata"

          # Set "data" vs. "sim".  The epoch below probably should follow suit.
          reality: "data"
          # reality: "sim"

          # if epoch is "dynamic" you MUST add
          # "wclsMultiChannelNoiseDB" to "inputers" and must NOT
          # add it if not "dynamic"
          # epoch: "dynamic"
          # epoch: "perfect"
          epoch: "after"

          # Save output signal waveforms (recob::Wire) in "sparse" or "dense" form
          signal_output_form: "sparse"

          # file: wires
          files_wires: "dunevd10kt-1x6x6-3view30deg-wires-v1.json.bz2"

          # file: fields
          # 3view30: dunevd-resp-isoc3views-18d92.json.bz2
          # 2view: pcbro-response-avg-12d50.json.bz2
          files_fields: "dunevd-resp-isoc3views-18d92.json.bz2"
          
          # set mapping between internal wct plane ids and larsoft
          # default is to assume WireCell::kU->geo::kU, kV->kV, kW->kW
          geo_planeid_labels: "default"
      }
      # ext-code, code
      structs : {
          # for nticks calculation in common/params.jsonnet: elec
          driftSpeed: 1.60563
          
          # used in ChannelSelector
          # 3view: 864; 3view30deg: 900; 2view: 928
          channel_per_crm: 900
          
          # response plane, related to which field response is used [cm]
          # 3view30: dunevd-resp-isoc3views-18d92.json.bz2: 18.92
          # 2view: pcbro-response-avg-12d50.json.bz2: 12.50
          response_plane: 18.92

          # number of time samples
          nticks: @local::dunefdvd_detproperties.NumberTimeSamples

          # number of CRMs, 36 for 1x6x6, 112 for 1x8x14
          ncrm: 36
      }
   }
}

dune10kt_dunefd_vertdrift_1x8x6_3view_30deg_data_nfsp : {
   module_type : WireCellToolkit
   wcls_main: {
      tool_type: WCLS
      apps: ["Pgrapher"]

      logsinks: ["stdout"]
      loglevels: ["debug", "pgraph:info"]

      # Libraries in which to look for WCT components
      plugins: ["WireCellGen", "WireCellSigProc", "WireCellRoot", "WireCellPgraph", "WireCellLarsoft"]

      # The tool marshals the art::Event to these visitors before.
      # See notes below in params.
      inputers: ["wclsRawFrameSource"
         # To use wclsMultiChannelNoiseDB you must also put epoch:dynamic below
         # and you must have geo::Geometry service in your environment.
         # ,"wclsMultiChannelNoiseDB"  
      ]

      # or after the WCT app is run.  These names MUST be used identically in the Jsonnet
      # fixme: https://github.com/WireCell/larwirecell/issues/3
      #outputers: ["wclsFrameSaver:nfsaver", "wclsFrameSaver:spsaver"]
      outputers: ["wclsFrameSaver:spsaver"]

      # This sets the "main" Jsonnet file which provides the 
      # configuration for the Wire-Cell Toolkit components.  It is
      # take as relative to entries in WIRECELL_PATH.
      configs: ["pgrapher/experiment/dune-vd/wcls-nf-sp.jsonnet"]

      # Set the "external variables" required by the Jsonnet.
      # ext-var, string
      params : {
          # This locates the input raw::RawDigit collection in the art::Event 
          raw_input_label: "tpcrawdecoder:daq"
          # raw_input_label: "simmer:orig"
          #raw_input_label: "caldata"

          # Set "data" vs. "sim".  The epoch below probably should follow suit.
          reality: "data"
          # reality: "sim"

          # if epoch is "dynamic" you MUST add
          # "wclsMultiChannelNoiseDB" to "inputers" and must NOT
          # add it if not "dynamic"
          # epoch: "dynamic"
          # epoch: "perfect"
          epoch: "after"

          # Save output signal waveforms (recob::Wire) in "sparse" or "dense" form
          signal_output_form: "sparse"

          # file: wires
          files_wires: "dunevd10kt_3view_30deg_v3_refactored_1x8x6ref.json.bz2"

          # file: fields
          # 3view30: dunevd-resp-isoc3views-18d92.json.bz2
          # 2view: pcbro-response-avg-12d50.json.bz2
          files_fields: "dunevd-resp-isoc3views-18d92.json.bz2"
          
          # set mapping between internal wct plane ids and larsoft
          # default is to assume WireCell::kU->geo::kU, kV->kV, kW->kW
          geo_planeid_labels: "default"
      }
      # ext-code, code
      structs : {
          # for nticks calculation in common/params.jsonnet: elec
          driftSpeed: 1.60563
          
          # used in ChannelSelector
          # 3view: 864; 3view30deg: 900; 2view: 928
          channel_per_crm: 864
          
          # response plane, related to which field response is used [cm]
          # 3view30: dunevd-resp-isoc3views-18d92.json.bz2: 18.92
          # 2view: pcbro-response-avg-12d50.json.bz2: 12.50
          response_plane: 18.92

          # number of time samples
          nticks: @local::dunefdvd_detproperties.NumberTimeSamples

          # number of CRMs, 36 for 1x6x6, 112 for 1x8x14
          ncrm: 48
      }
   }
}

dune10kt_dunefd_vertdrift_1x8x6_3view_data_nfsp : {
   module_type : WireCellToolkit
   wcls_main: {
      tool_type: WCLS
      apps: ["Pgrapher"]

      logsinks: ["stdout"]
      loglevels: ["debug", "pgraph:info"]

      # Libraries in which to look for WCT components
      plugins: ["WireCellGen", "WireCellSigProc", "WireCellRoot", "WireCellPgraph", "WireCellLarsoft"]

      # The tool marshals the art::Event to these visitors before.
      # See notes below in params.
      inputers: ["wclsRawFrameSource"
         # To use wclsMultiChannelNoiseDB you must also put epoch:dynamic below
         # and you must have geo::Geometry service in your environment.
         # ,"wclsMultiChannelNoiseDB"  
      ]

      # or after the WCT app is run.  These names MUST be used identically in the Jsonnet
      # fixme: https://github.com/WireCell/larwirecell/issues/3
      #outputers: ["wclsFrameSaver:nfsaver", "wclsFrameSaver:spsaver"]
      outputers: ["wclsFrameSaver:spsaver"]

      # This sets the "main" Jsonnet file which provides the 
      # configuration for the Wire-Cell Toolkit components.  It is
      # take as relative to entries in WIRECELL_PATH.
      configs: ["pgrapher/experiment/dune-vd/wcls-nf-sp.jsonnet"]

      # Set the "external variables" required by the Jsonnet.
      # ext-var, string
      params : {
          # This locates the input raw::RawDigit collection in the art::Event 
          raw_input_label: "tpcrawdecoder:daq"
          # raw_input_label: "simmer:orig"
          #raw_input_label: "caldata"

          # Set "data" vs. "sim".  The epoch below probably should follow suit.
          reality: "data"
          # reality: "sim"

          # if epoch is "dynamic" you MUST add
          # "wclsMultiChannelNoiseDB" to "inputers" and must NOT
          # add it if not "dynamic"
          # epoch: "dynamic"
          # epoch: "perfect"
          epoch: "after"

          # Save output signal waveforms (recob::Wire) in "sparse" or "dense" form
          signal_output_form: "sparse"

          # file: wires
          files_wires: "dunevd10kt_3view_v2_refactored_1x8x6ref.json.bz2"

          # file: fields
          # 3view30: dunevd-resp-isoc3views-18d92.json.bz2
          # 2view: pcbro-response-avg-12d50.json.bz2
          files_fields: "dunevd-resp-isoc3views-18d92.json.bz2"

          # set mapping between internal wct plane ids and larsoft
          # WCT assumes kU, kV, kW regardless of orientation. 
          # Larsoft expects kY for 2nd induction plane for this geometry
          # Set the mapping as kU->kU, kV->kY, kW->kW in the jsonnet
          geo_planeid_labels: "dunevd_3view"
          
      }
      # ext-code, code
      structs : {
          # for nticks calculation in common/params.jsonnet: elec
          driftSpeed: 1.60563
          
          # used in ChannelSelector
          # 3view: 864; 3view30deg: 900; 2view: 928
          channel_per_crm: 864
          
          # response plane, related to which field response is used [cm]
          # 3view30: dunevd-resp-isoc3views-18d92.json.bz2: 18.92
          # 2view: pcbro-response-avg-12d50.json.bz2: 12.50
          response_plane: 18.92

          # number of time samples
          nticks: @local::dunefdvd_detproperties.NumberTimeSamples

          # number of CRMs, 36 for 1x6x6, 112 for 1x8x14
          ncrm: 48
      }
   }
}

dune10kt_dunefd_vertdrift_1x8x14_3view_data_nfsp : {
   module_type : WireCellToolkit
   wcls_main: {
      tool_type: WCLS
      apps: ["Pgrapher"]

      logsinks: ["stdout"]
      loglevels: ["debug", "pgraph:info"]

      # Libraries in which to look for WCT components
      plugins: ["WireCellGen", "WireCellSigProc", "WireCellRoot", "WireCellPgraph", "WireCellLarsoft"]

      # The tool marshals the art::Event to these visitors before.
      # See notes below in params.
      inputers: ["wclsRawFrameSource"
         # To use wclsMultiChannelNoiseDB you must also put epoch:dynamic below
         # and you must have geo::Geometry service in your environment.
         # ,"wclsMultiChannelNoiseDB"  
      ]

      # or after the WCT app is run.  These names MUST be used identically in the Jsonnet
      # fixme: https://github.com/WireCell/larwirecell/issues/3
      #outputers: ["wclsFrameSaver:nfsaver", "wclsFrameSaver:spsaver"]
      outputers: ["wclsFrameSaver:spsaver"]

      # This sets the "main" Jsonnet file which provides the 
      # configuration for the Wire-Cell Toolkit components.  It is
      # take as relative to entries in WIRECELL_PATH.
      configs: ["pgrapher/experiment/dune-vd/wcls-nf-sp.jsonnet"]

      # Set the "external variables" required by the Jsonnet.
      # ext-var, string
      params : {
          # This locates the input raw::RawDigit collection in the art::Event 
          raw_input_label: "tpcrawdecoder:daq"
          # raw_input_label: "simmer:orig"
          #raw_input_label: "caldata"

          # Set "data" vs. "sim".  The epoch below probably should follow suit.
          reality: "data"
          # reality: "sim"

          # if epoch is "dynamic" you MUST add
          # "wclsMultiChannelNoiseDB" to "inputers" and must NOT
          # add it if not "dynamic"
          # epoch: "dynamic"
          # epoch: "perfect"
          epoch: "after"

          # Save output signal waveforms (recob::Wire) in "sparse" or "dense" form
          signal_output_form: "sparse"

          # file: wires
          files_wires: "dunevd10kt_3view_v2_refactored_1x8x14ref.json.bz2"

          # file: fields
          # 3view30: dunevd-resp-isoc3views-18d92.json.bz2
          # 2view: pcbro-response-avg-12d50.json.bz2
          files_fields: "dunevd-resp-isoc3views-18d92.json.bz2"

          # set mapping between internal wct plane ids and larsoft
          # WCT assumes kU, kV, kW regardless of orientation. 
          # Larsoft expects kY for 2nd induction plane for this geometry
          # Set the mapping as kU->kU, kV->kY, kW->kW in the jsonnet
          geo_planeid_labels: "dunevd_3view"
          
      }
      # ext-code, code
      structs : {
          # for nticks calculation in common/params.jsonnet: elec
          driftSpeed: 1.60563
          
          # used in ChannelSelector
          # 3view: 864; 3view30deg: 900; 2view: 928
          channel_per_crm: 864
          
          # response plane, related to which field response is used [cm]
          # 3view30: dunevd-resp-isoc3views-18d92.json.bz2: 18.92
          # 2view: pcbro-response-avg-12d50.json.bz2: 12.50
          response_plane: 18.92

          # number of time samples
          nticks: @local::dunefdvd_detproperties.NumberTimeSamples

          # number of CRMs, 36 for 1x6x6, 112 for 1x8x14
          ncrm: 112
      }
   }
}
dune10kt_dunefd_vertdrift_1x8x14_3view_sim_nfsp : {
    module_type : WireCellToolkit
    wcls_main: {
        tool_type: WCLS
        apps: ["Pgrapher"]
        # apps: ["TbbFlow"]

        logsinks: ["stdout:info", "wcls-sim-drift-simchannel-nf-sp.log:debug"]
        loglevels: ["debug"]

        plugins: ["WireCellPgraph", "WireCellGen","WireCellSio","WireCellRoot","WireCellLarsoft"
        # ,"WireCellTbb"
        # , "WireCellPytorch"
        ]

        // needs to be found via your WIRECELL_PATH
        configs: ["pgrapher/experiment/dune-vd/wcls-sim-drift-simchannel-nf-sp.jsonnet"]


        // Contract note: these exact "type:name" must be used to identify
        // the configuration data structures for these components in the Jsonnet.

        inputers: ["wclsSimDepoSource:"]
        outputers: [
            "wclsSimChannelSink:postdrift",
            "wclsFrameSaver:spsignals"
        ]

        // Make available parameters via Jsonnet's std.extVar()
        params: {
            # file: wires
            files_wires: "dunevd10kt_3view_v2_refactored_1x8x14ref.json.bz2"
            # file: fields
            # dunevd-resp-isoc3views-18d92.json.bz2 30,-30,90
            # pcbro-response-avg-12d50.json.bz2 2view prototype
            files_fields: "dunevd-resp-isoc3views-18d92.json.bz2"
            # file: noise
            files_noise: "dunevd10kt-1x6x6-3view-noise-spectra-v1.json.bz2"
            # set mapping between internal wct plane ids and larsoft
            # default is to assume WireCell::kU->geo::kU, kV->kV, kW->kW
            # 3view-30deg: default, 3view: dunevd_3view
            geo_planeid_labels: "dunevd_3view"
            # process pratial or all CRMs: all or partial
            process_crm: "partial"
        }
        structs: {
            # number of time samples
            nticks: @local::dunefdvd_detproperties.NumberTimeSamples
            # Longitudinal diffusion constant [cm2/ns] 4.0e-9
            DL: @local::dunefd_largeantparameters.LongitudinalDiffusion
            # Transverse diffusion constant [cm2/ns] 8.8e-9
            DT: @local::dunefd_largeantparameters.TransverseDiffusion
            # Electron lifetime [us] #10.4e3
            lifetime: @local::dunefdvd_detproperties.Electronlifetime
            # Electron drift speed, assumes a certain applied E-field [mm/us]
            driftSpeed: 1.60563 # 1.60563, 1.565
            # G4RefTime [us]
            G4RefTime: @local::dunefd_detectorclocks.G4RefTime
            # response plane [cm]
            response_plane: 18.92
            # number of CRMs, 36 for 1x6x6, 112 for 1x8x14
            ncrm: 112
            # use dnn_roi or not
            use_dnnroi: false
        }
    }
}

dune10kt_dunefd_vertdrift_1x8x6_3view_sim_nfsp : {
    @table::dune10kt_dunefd_vertdrift_1x8x14_3view_sim_nfsp
    wcls_main: {
        @table::dune10kt_dunefd_vertdrift_1x8x14_3view_sim_nfsp.wcls_main
        params: {
            @table::dune10kt_dunefd_vertdrift_1x8x14_3view_sim_nfsp.wcls_main.params
            files_wires: "dunevd10kt_3view_v2_refactored_1x8x6ref.json.bz2"
            process_crm: "all"
        }
        structs: {
            @table::dune10kt_dunefd_vertdrift_1x8x14_3view_sim_nfsp.wcls_main.structs
            ncrm: 48
        }
    }
}

dune10kt_dunefd_vertdrift_1x8x14_3view_30deg_sim_nfsp : {
    @table::dune10kt_dunefd_vertdrift_1x8x14_3view_sim_nfsp
    wcls_main: {
        @table::dune10kt_dunefd_vertdrift_1x8x14_3view_sim_nfsp.wcls_main
        params: {
            @table::dune10kt_dunefd_vertdrift_1x8x14_3view_sim_nfsp.wcls_main.params
            files_wires: "dunevd10kt_3view_30deg_v3_refactored_1x8x14ref.json.bz2"
            files_fields: "dunevd-resp-isoc3views-18d92.json.bz2"
            files_noise: "dunevd10kt-1x6x6-3view30deg-noise-spectra-v1.json.bz2"
            geo_planeid_labels: "default"
            process_crm: "partial"
        }
        structs: {
            @table::dune10kt_dunefd_vertdrift_1x8x14_3view_sim_nfsp.wcls_main.structs
            ncrm: 112
        }
    }
}

dune10kt_dunefd_vertdrift_1x8x6_3view_30deg_sim_nfsp : {
    @table::dune10kt_dunefd_vertdrift_1x8x14_3view_30deg_sim_nfsp
    wcls_main: {
        @table::dune10kt_dunefd_vertdrift_1x8x14_3view_30deg_sim_nfsp.wcls_main
        params: {
            @table::dune10kt_dunefd_vertdrift_1x8x14_3view_30deg_sim_nfsp.wcls_main.params
            files_wires: "dunevd10kt_3view_30deg_v3_refactored_1x8x6ref.json.bz2"
            process_crm: "all"
        }
        structs: {
            @table::dune10kt_dunefd_vertdrift_1x8x14_3view_30deg_sim_nfsp.wcls_main.structs
            ncrm: 48
        }
    }
}

dune10kt_dunefd_vertdrift_1x6x6_2view_data_nfsp : {
    @table::dune10kt_dunefd_vertdrift_1x6x6_3view_data_nfsp
    wcls_main: {
        @table::dune10kt_dunefd_vertdrift_1x6x6_3view_30deg_data_nfsp.wcls_main
        params: {
            @table::dune10kt_dunefd_vertdrift_1x6x6_3view_30deg_data_nfsp.wcls_main.params
            files_wires: "dunevd10kt-1x6x6-2view-wires-v1.json.bz2"
            files_fields: "pcbro-response-avg-12d50.json.bz2"
            geo_planeid_labels: "dunevd_3view"
        }
        structs: {
            @table::dune10kt_dunefd_vertdrift_1x6x6_3view_30deg_data_nfsp.wcls_main.structs
            channel_per_crm: 928
            response_plane: 12.50
        }
    }
}

dune10kt_dunefd_vertdrift_1x8x6_2view_data_nfsp : {
    @table::dune10kt_dunefd_vertdrift_1x6x6_2view_data_nfsp
    wcls_main: {
        @table::dune10kt_dunefd_vertdrift_1x6x6_2view_data_nfsp.wcls_main
        params: {
            @table::dune10kt_dunefd_vertdrift_1x6x6_2view_data_nfsp.wcls_main.params
            files_wires: "dunevd10kt_2view_v2_refactored_1x8x6ref.json.bz2"
        }
        structs: {
            @table::dune10kt_dunefd_vertdrift_1x6x6_2view_data_nfsp.wcls_main.structs
            ncrm: 48
        }
    }
}

dune_vd_coldbox_nfsp : {
   module_type : WireCellToolkit
   wcls_main: {
      tool_type: WCLS
      apps: ["Pgrapher"]
      logsinks: ["stdout"]
      loglevels: ["debug", "pgraph:info"]
      # Libraries in which to look for WCT components
      plugins: ["WireCellGen", "WireCellSigProc", "WireCellRoot", "WireCellPgraph", "WireCellLarsoft"]
      inputers: ["wclsCookedFrameSource"
         # To use wclsMultiChannelNoiseDB you must also put epoch:dynamic below
         # and you must have geo::Geometry service in your environment.
         # ,"wclsMultiChannelNoiseDB"  
      ]
      # outputers: ["wclsFrameSaver:nfsaver", "wclsFrameSaver:spsaver"]
      outputers: ["wclsFrameSaver:spsaver"]
      configs: ["pgrapher/experiment/dune-vd-coldbox/wcls-nf-sp.jsonnet"]
      params : {
         # raw_input_label: "tpcrawdecoder:daq"
         raw_input_label: "caldata:dataprep"
         reality: "data"
         # reality: "sim"
         # epoch: "dynamic"
         # epoch: "perfect"
         epoch: "after"
         signal_output_form: "sparse"

         # set mapping between internal wct plane ids and larsoft
         # WCT assumes kU, kV, kW regardless of orientation. 
         # Larsoft expects kY for 2nd induction plane for this geometry
         # Set the mapping as kU->kU, kV->kY, kW->kW in the jsonnet
         geo_planeid_labels: "dunevd_3view"

         active_cru: "bde" // "tde"

         use_magnify: "false"
      }
   }
}

dune_vd_crp2_nfsp : {
   module_type : WireCellToolkit
   wcls_main: {
      tool_type: WCLS
      apps: ["Pgrapher"]
      logsinks: ["stdout"]
      loglevels: ["debug", "pgraph:info"]
      plugins: ["WireCellGen", "WireCellSigProc", "WireCellRoot", "WireCellPgraph", "WireCellLarsoft"]
      inputers: ["wclsRawFrameSource"]
      outputers: ["wclsFrameSaver:spsaver"]
      configs: ["pgrapher/experiment/dunevd-crp2/wcls-nf-sp.jsonnet"]
      params : {
         raw_input_label: "caldata:dataprep"
         reality: "data"
         epoch: "after"
         signal_output_form: "sparse"
         use_magnify: "false"
      }
      structs: {
         clock_speed: @local::vdcb_crp2_services.DetectorClocksService.ClockSpeedTPC
      }

   }
}

dune_vd_crp2_sp : {
   module_type : WireCellToolkit
   wcls_main: {
      tool_type: WCLS
      apps: ["Pgrapher"]
      logsinks: ["stdout"]
      loglevels: ["debug", "pgraph:info"]
      plugins: ["WireCellGen", "WireCellSigProc", "WireCellRoot", "WireCellPgraph", "WireCellLarsoft"]
      inputers: ["wclsCookedFrameSource"]
      outputers: ["wclsFrameSaver:spsaver"]
      configs: ["pgrapher/experiment/dunevd-crp2/wcls-sp.jsonnet"]
      params : {
         raw_input_label: "caldata:dataprep"
         reality: "data"
         epoch: "after"
         signal_output_form: "sparse"
         use_magnify: "false"
      }
      structs: {
         clock_speed: @local::vdcb_crp2_services.DetectorClocksService.ClockSpeedTPC
      }

   }
}

protodunevd_nfsp : {
   module_type : WireCellToolkit
   wcls_main: {
      tool_type: WCLS
      apps: ["Pgrapher"]
      logsinks: ["stdout"]
      loglevels: ["debug", "pgraph:info"]
      plugins: ["WireCellGen", "WireCellSigProc", "WireCellRoot", "WireCellPgraph", "WireCellLarsoft"]
      inputers: ["wclsCookedFrameSource"]
      outputers: ["wclsFrameSaver:spsaver"]
      configs: ["pgrapher/experiment/protodunevd/wcls-nf-sp.jsonnet"]
      params : {
         raw_input_label: "caldata:dataprep"
         reality: "data"
         epoch: "after"
         signal_output_form: "sparse"
         use_magnify: "false"
      }
   }
}

END_PROLOG
