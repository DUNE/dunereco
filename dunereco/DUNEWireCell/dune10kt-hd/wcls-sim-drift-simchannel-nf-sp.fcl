#include "services_dune.fcl"

process_name: wclssim
physics :{
   producers: {
      plopper : {
        module_type : BlipMaker
      }
      tpcrawdecoder : {
         module_type : WireCellToolkit
         wcls_main: {
            tool_type: WCLS
            apps: ["TbbFlow"] #Pgrapher, TbbFlow

            logsinks: ["stdout"]
            loglevels: ["debug"]

            plugins: ["WireCellPgraph", "WireCellGen","WireCellSio","WireCellRoot","WireCellLarsoft","WireCellTbb"]

            // needs to be found via your WIRECELL_PATH
            configs: ["pgrapher/experiment/dune10kt-hd/wcls-sim-drift-simchannel-nf-sp.jsonnet"]


            // Contract note: these exact "type:name" must be used to identify
            // the configuration data structures for these components in the Jsonnet.

            inputers: ["wclsSimDepoSource:"]
            outputers: [
                "wclsSimChannelSink:postdrift",
                "wclsFrameSaver:spsignals"
            ]

            // Make available parameters via Jsonnet's std.extVar()
            params: {
            }
            structs: {
              # Longitudinal diffusion constant [cm2/ns] (previous default 4.0 cm2/s)
              DL: @local::dunefd_largeantparameters.LongitudinalDiffusion 
              # Transverse diffusion constant [cm2/ns] (previous default 8.8 cm2/s)
              DT: @local::dunefd_largeantparameters.TransverseDiffusion
              # Electron lifetime [us] (previous default 10.4 ms)
              lifetime: @local::dunefd_detproperties.Electronlifetime
              # Electron drift speed, assumes a certain applied E-field [mm/us] (previous default 1.565)
              driftSpeed: 1.60563
              # G4RefTime [us]
              G4RefTime: @local::dunefd_detectorclocks.G4RefTime
              # use_hydra / skip processing
              use_hydra: true
            }

         }
      }
   }
   p1 : [ plopper, tpcrawdecoder ]
   outputFiles : [ out ]
   
   trigger_paths : [ p1 ]
   end_paths: [ outputFiles ]
}
outputs: {
   out: {
      module_type: RootOutput
      // fileName: "%ifb_wcsim.root"
      fileName: "wcsim.root"

      outputCommands :   [
         // "drop *", "keep recob::Wires_*_*_*"
         "keep *_*_*_*"
      ]

   }
}
